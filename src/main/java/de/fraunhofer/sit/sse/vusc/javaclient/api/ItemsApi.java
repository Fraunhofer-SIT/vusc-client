/*
 * Public API
 * Assessment API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: helpdesk@codeinspect.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.fraunhofer.sit.sse.vusc.javaclient.api;

import de.fraunhofer.sit.sse.vusc.javaclient.invoker.ApiCallback;
import de.fraunhofer.sit.sse.vusc.javaclient.invoker.ApiClient;
import de.fraunhofer.sit.sse.vusc.javaclient.invoker.ApiException;
import de.fraunhofer.sit.sse.vusc.javaclient.invoker.ApiResponse;
import de.fraunhofer.sit.sse.vusc.javaclient.invoker.Configuration;
import de.fraunhofer.sit.sse.vusc.javaclient.invoker.Pair;
import de.fraunhofer.sit.sse.vusc.javaclient.invoker.ProgressRequestBody;
import de.fraunhofer.sit.sse.vusc.javaclient.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import de.fraunhofer.sit.sse.vusc.javaclient.models.ModelAPIException;
import de.fraunhofer.sit.sse.vusc.javaclient.models.Verification;
import de.fraunhofer.sit.sse.vusc.javaclient.models.VulnerabilityChangeLogEntry;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ItemsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ItemsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ItemsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for changeSeverity
     * @param jobid The id of the job (required)
     * @param itemid The id of the vulnerability (required)
     * @param severity The new severity (required)
     * @param reason The reason for change (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Wrong input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changeSeverityCall(Long jobid, Long itemid, String severity, String reason, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/jobs/{jobid}/vulnerabilities/{itemid}/severity"
            .replaceAll("\\{" + "jobid" + "\\}", localVarApiClient.escapeString(jobid.toString()))
            .replaceAll("\\{" + "itemid" + "\\}", localVarApiClient.escapeString(itemid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (severity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("severity", severity));
        }

        if (reason != null) {
            localVarHeaderParams.put("reason", localVarApiClient.parameterToString(reason));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null && localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changeSeverityValidateBeforeCall(Long jobid, Long itemid, String severity, String reason, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jobid' is set
        if (jobid == null) {
            throw new ApiException("Missing the required parameter 'jobid' when calling changeSeverity(Async)");
        }
        
        // verify the required parameter 'itemid' is set
        if (itemid == null) {
            throw new ApiException("Missing the required parameter 'itemid' when calling changeSeverity(Async)");
        }
        
        // verify the required parameter 'severity' is set
        if (severity == null) {
            throw new ApiException("Missing the required parameter 'severity' when calling changeSeverity(Async)");
        }
        
        // verify the required parameter 'reason' is set
        if (reason == null) {
            throw new ApiException("Missing the required parameter 'reason' when calling changeSeverity(Async)");
        }
        

        okhttp3.Call localVarCall = changeSeverityCall(jobid, itemid, severity, reason, _callback);
        return localVarCall;

    }

    /**
     * Changes the severity of a vulnerability
     * Changes the severity of a vulnerability.
     * @param jobid The id of the job (required)
     * @param itemid The id of the vulnerability (required)
     * @param severity The new severity (required)
     * @param reason The reason for change (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Wrong input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
     </table>
     */
    public void changeSeverity(Long jobid, Long itemid, String severity, String reason) throws ApiException {
        changeSeverityWithHttpInfo(jobid, itemid, severity, reason);
    }

    /**
     * Changes the severity of a vulnerability
     * Changes the severity of a vulnerability.
     * @param jobid The id of the job (required)
     * @param itemid The id of the vulnerability (required)
     * @param severity The new severity (required)
     * @param reason The reason for change (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Wrong input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> changeSeverityWithHttpInfo(Long jobid, Long itemid, String severity, String reason) throws ApiException {
        okhttp3.Call localVarCall = changeSeverityValidateBeforeCall(jobid, itemid, severity, reason, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Changes the severity of a vulnerability (asynchronously)
     * Changes the severity of a vulnerability.
     * @param jobid The id of the job (required)
     * @param itemid The id of the vulnerability (required)
     * @param severity The new severity (required)
     * @param reason The reason for change (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Wrong input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changeSeverityAsync(Long jobid, Long itemid, String severity, String reason, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = changeSeverityValidateBeforeCall(jobid, itemid, severity, reason, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getChangeLog
     * @param jobid The id of the job (required)
     * @param itemid The id of the vulnerability (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Wrong input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChangeLogCall(Long jobid, Long itemid, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/jobs/{jobid}/vulnerabilities/{itemid}/change-log"
            .replaceAll("\\{" + "jobid" + "\\}", localVarApiClient.escapeString(jobid.toString()))
            .replaceAll("\\{" + "itemid" + "\\}", localVarApiClient.escapeString(itemid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null && localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChangeLogValidateBeforeCall(Long jobid, Long itemid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jobid' is set
        if (jobid == null) {
            throw new ApiException("Missing the required parameter 'jobid' when calling getChangeLog(Async)");
        }
        
        // verify the required parameter 'itemid' is set
        if (itemid == null) {
            throw new ApiException("Missing the required parameter 'itemid' when calling getChangeLog(Async)");
        }
        

        okhttp3.Call localVarCall = getChangeLogCall(jobid, itemid, _callback);
        return localVarCall;

    }

    /**
     * Get the change log of a vulnerability
     * Get a list of every change made to the severity of a vulnerability
     * @param jobid The id of the job (required)
     * @param itemid The id of the vulnerability (required)
     * @return List&lt;VulnerabilityChangeLogEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Wrong input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found </td><td>  -  </td></tr>
     </table>
     */
    public List<VulnerabilityChangeLogEntry> getChangeLog(Long jobid, Long itemid) throws ApiException {
        ApiResponse<List<VulnerabilityChangeLogEntry>> localVarResp = getChangeLogWithHttpInfo(jobid, itemid);
        return localVarResp.getData();
    }

    /**
     * Get the change log of a vulnerability
     * Get a list of every change made to the severity of a vulnerability
     * @param jobid The id of the job (required)
     * @param itemid The id of the vulnerability (required)
     * @return ApiResponse&lt;List&lt;VulnerabilityChangeLogEntry&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Wrong input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<VulnerabilityChangeLogEntry>> getChangeLogWithHttpInfo(Long jobid, Long itemid) throws ApiException {
        okhttp3.Call localVarCall = getChangeLogValidateBeforeCall(jobid, itemid, null);
        Type localVarReturnType = new TypeToken<List<VulnerabilityChangeLogEntry>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the change log of a vulnerability (asynchronously)
     * Get a list of every change made to the severity of a vulnerability
     * @param jobid The id of the job (required)
     * @param itemid The id of the vulnerability (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Wrong input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChangeLogAsync(Long jobid, Long itemid, final ApiCallback<List<VulnerabilityChangeLogEntry>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChangeLogValidateBeforeCall(jobid, itemid, _callback);
        Type localVarReturnType = new TypeToken<List<VulnerabilityChangeLogEntry>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verify
     * @param jobid The id of the job (required)
     * @param itemid The id of the item (e.g. vulnerability) to verify (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Wrong input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyCall(Long jobid, Long itemid, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/jobs/{jobid}/verify/{itemid}"
            .replaceAll("\\{" + "jobid" + "\\}", localVarApiClient.escapeString(jobid.toString()))
            .replaceAll("\\{" + "itemid" + "\\}", localVarApiClient.escapeString(itemid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null && localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyValidateBeforeCall(Long jobid, Long itemid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jobid' is set
        if (jobid == null) {
            throw new ApiException("Missing the required parameter 'jobid' when calling verify(Async)");
        }
        
        // verify the required parameter 'itemid' is set
        if (itemid == null) {
            throw new ApiException("Missing the required parameter 'itemid' when calling verify(Async)");
        }
        

        okhttp3.Call localVarCall = verifyCall(jobid, itemid, _callback);
        return localVarCall;

    }

    /**
     * Verifies an item such as a vulnerability
     * Some vulnerabilties can only be checked involving a huge time consumption. Some verifications may involve effects such as connecting to third party servers, for example to try out passwords. Such verifications can be triggered explicitly using this API call.
     * @param jobid The id of the job (required)
     * @param itemid The id of the item (e.g. vulnerability) to verify (required)
     * @return List&lt;Verification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Wrong input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
     </table>
     */
    public List<Verification> verify(Long jobid, Long itemid) throws ApiException {
        ApiResponse<List<Verification>> localVarResp = verifyWithHttpInfo(jobid, itemid);
        return localVarResp.getData();
    }

    /**
     * Verifies an item such as a vulnerability
     * Some vulnerabilties can only be checked involving a huge time consumption. Some verifications may involve effects such as connecting to third party servers, for example to try out passwords. Such verifications can be triggered explicitly using this API call.
     * @param jobid The id of the job (required)
     * @param itemid The id of the item (e.g. vulnerability) to verify (required)
     * @return ApiResponse&lt;List&lt;Verification&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Wrong input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Verification>> verifyWithHttpInfo(Long jobid, Long itemid) throws ApiException {
        okhttp3.Call localVarCall = verifyValidateBeforeCall(jobid, itemid, null);
        Type localVarReturnType = new TypeToken<List<Verification>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Verifies an item such as a vulnerability (asynchronously)
     * Some vulnerabilties can only be checked involving a huge time consumption. Some verifications may involve effects such as connecting to third party servers, for example to try out passwords. Such verifications can be triggered explicitly using this API call.
     * @param jobid The id of the job (required)
     * @param itemid The id of the item (e.g. vulnerability) to verify (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Wrong input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access denied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyAsync(Long jobid, Long itemid, final ApiCallback<List<Verification>> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyValidateBeforeCall(jobid, itemid, _callback);
        Type localVarReturnType = new TypeToken<List<Verification>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
