/*
 * Public API
 * Assessment API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: helpdesk@codeinspect.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.fraunhofer.sit.sse.vusc.javaclient.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * CodeLocationAllOf
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-01-14T02:27:21.666995377Z[GMT]")
public class CodeLocationAllOf {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  /**
   * The type of code location, e.g., field or method
   */
  @JsonAdapter(CodeLocationTypeEnum.Adapter.class)
  public enum CodeLocationTypeEnum {
    CLASS("Class"),
    
    FIELD("Field"),
    
    METHOD("Method"),
    
    STATEMENT("Statement"),
    
    ADDRESS("Address"),
    
    PATH("Path");

    private String value;

    CodeLocationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CodeLocationTypeEnum fromValue(String value) {
      for (CodeLocationTypeEnum b : CodeLocationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CodeLocationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CodeLocationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CodeLocationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CodeLocationTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CODE_LOCATION_TYPE = "codeLocationType";
  @SerializedName(SERIALIZED_NAME_CODE_LOCATION_TYPE)
  private CodeLocationTypeEnum codeLocationType;

  public static final String SERIALIZED_NAME_CLASS_NAME = "className";
  @SerializedName(SERIALIZED_NAME_CLASS_NAME)
  private String className;

  public static final String SERIALIZED_NAME_MEMBER_NAME = "memberName";
  @SerializedName(SERIALIZED_NAME_MEMBER_NAME)
  private String memberName;

  public static final String SERIALIZED_NAME_STATEMENT = "statement";
  @SerializedName(SERIALIZED_NAME_STATEMENT)
  private String statement;

  public static final String SERIALIZED_NAME_LINE_IN_INTERMEDIATE_CODE = "lineInIntermediateCode";
  @SerializedName(SERIALIZED_NAME_LINE_IN_INTERMEDIATE_CODE)
  private Integer lineInIntermediateCode;

  public CodeLocationAllOf() { 
  }

  public CodeLocationAllOf id(Long id) {
    
    this.id = id;
    return this;
  }

   /**
   * The id of the path
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The id of the path")

  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    this.id = id;
  }


  public CodeLocationAllOf codeLocationType(CodeLocationTypeEnum codeLocationType) {
    
    this.codeLocationType = codeLocationType;
    return this;
  }

   /**
   * The type of code location, e.g., field or method
   * @return codeLocationType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "field", value = "The type of code location, e.g., field or method")

  public CodeLocationTypeEnum getCodeLocationType() {
    return codeLocationType;
  }


  public void setCodeLocationType(CodeLocationTypeEnum codeLocationType) {
    this.codeLocationType = codeLocationType;
  }


  public CodeLocationAllOf className(String className) {
    
    this.className = className;
    return this;
  }

   /**
   * The class
   * @return className
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "com.insecure.app.a", value = "The class")

  public String getClassName() {
    return className;
  }


  public void setClassName(String className) {
    this.className = className;
  }


  public CodeLocationAllOf memberName(String memberName) {
    
    this.memberName = memberName;
    return this;
  }

   /**
   * A method signature or a field name
   * @return memberName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "java.lang.String a(int,int)", value = "A method signature or a field name")

  public String getMemberName() {
    return memberName;
  }


  public void setMemberName(String memberName) {
    this.memberName = memberName;
  }


  public CodeLocationAllOf statement(String statement) {
    
    this.statement = statement;
    return this;
  }

   /**
   * A statement in code
   * @return statement
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "$a = $a + 1", value = "A statement in code")

  public String getStatement() {
    return statement;
  }


  public void setStatement(String statement) {
    this.statement = statement;
  }


  public CodeLocationAllOf lineInIntermediateCode(Integer lineInIntermediateCode) {
    
    this.lineInIntermediateCode = lineInIntermediateCode;
    return this;
  }

   /**
   * The line number in code. Note that this line number does not represent a code location in the original source code, but in the intermediate representation retrieved from the app under analysis.
   * @return lineInIntermediateCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "33", value = "The line number in code. Note that this line number does not represent a code location in the original source code, but in the intermediate representation retrieved from the app under analysis.")

  public Integer getLineInIntermediateCode() {
    return lineInIntermediateCode;
  }


  public void setLineInIntermediateCode(Integer lineInIntermediateCode) {
    this.lineInIntermediateCode = lineInIntermediateCode;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CodeLocationAllOf codeLocationAllOf = (CodeLocationAllOf) o;
    return Objects.equals(this.id, codeLocationAllOf.id) &&
        Objects.equals(this.codeLocationType, codeLocationAllOf.codeLocationType) &&
        Objects.equals(this.className, codeLocationAllOf.className) &&
        Objects.equals(this.memberName, codeLocationAllOf.memberName) &&
        Objects.equals(this.statement, codeLocationAllOf.statement) &&
        Objects.equals(this.lineInIntermediateCode, codeLocationAllOf.lineInIntermediateCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, codeLocationType, className, memberName, statement, lineInIntermediateCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CodeLocationAllOf {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    codeLocationType: ").append(toIndentedString(codeLocationType)).append("\n");
    sb.append("    className: ").append(toIndentedString(className)).append("\n");
    sb.append("    memberName: ").append(toIndentedString(memberName)).append("\n");
    sb.append("    statement: ").append(toIndentedString(statement)).append("\n");
    sb.append("    lineInIntermediateCode: ").append(toIndentedString(lineInIntermediateCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

