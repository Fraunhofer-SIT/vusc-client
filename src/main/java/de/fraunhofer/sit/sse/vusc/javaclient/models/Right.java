/*
 * Public API
 * Assessment API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: helpdesk@codeinspect.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.fraunhofer.sit.sse.vusc.javaclient.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * A right that a user or group may hold.
 */
@ApiModel(description = "A right that a user or group may hold.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-01-14T02:27:21.666995377Z[GMT]")
public class Right {
  public static final String SERIALIZED_NAME_RIGHT_NAME = "rightName";
  @SerializedName(SERIALIZED_NAME_RIGHT_NAME)
  private String rightName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_HUMAN_READABLE_NAME = "humanReadableName";
  @SerializedName(SERIALIZED_NAME_HUMAN_READABLE_NAME)
  private String humanReadableName;

  /**
   * The scope of the right
   */
  @JsonAdapter(ScopeEnum.Adapter.class)
  public enum ScopeEnum {
    GLOBAL("Global"),
    
    OBJECT("Object");

    private String value;

    ScopeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ScopeEnum fromValue(String value) {
      for (ScopeEnum b : ScopeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ScopeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScopeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ScopeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ScopeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private ScopeEnum scope;

  public static final String SERIALIZED_NAME_INHERITED = "inherited";
  @SerializedName(SERIALIZED_NAME_INHERITED)
  private Boolean inherited;

  public Right() { 
  }

  public Right rightName(String rightName) {
    
    this.rightName = rightName;
    return this;
  }

   /**
   * The unique name of the right
   * @return rightName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "SECURITY_ADMIN", required = true, value = "The unique name of the right")

  public String getRightName() {
    return rightName;
  }


  public void setRightName(String rightName) {
    this.rightName = rightName;
  }


  public Right description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * The description of the right
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "May grant rights and change groups and users", value = "The description of the right")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public Right humanReadableName(String humanReadableName) {
    
    this.humanReadableName = humanReadableName;
    return this;
  }

   /**
   * The human readable name of the right
   * @return humanReadableName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Security Administrator", value = "The human readable name of the right")

  public String getHumanReadableName() {
    return humanReadableName;
  }


  public void setHumanReadableName(String humanReadableName) {
    this.humanReadableName = humanReadableName;
  }


  public Right scope(ScopeEnum scope) {
    
    this.scope = scope;
    return this;
  }

   /**
   * The scope of the right
   * @return scope
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Global", required = true, value = "The scope of the right")

  public ScopeEnum getScope() {
    return scope;
  }


  public void setScope(ScopeEnum scope) {
    this.scope = scope;
  }


  public Right inherited(Boolean inherited) {
    
    this.inherited = inherited;
    return this;
  }

   /**
   * Whether this right is inherited.
   * @return inherited
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether this right is inherited.")

  public Boolean getInherited() {
    return inherited;
  }


  public void setInherited(Boolean inherited) {
    this.inherited = inherited;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Right right = (Right) o;
    return Objects.equals(this.rightName, right.rightName) &&
        Objects.equals(this.description, right.description) &&
        Objects.equals(this.humanReadableName, right.humanReadableName) &&
        Objects.equals(this.scope, right.scope) &&
        Objects.equals(this.inherited, right.inherited);
  }

  @Override
  public int hashCode() {
    return Objects.hash(rightName, description, humanReadableName, scope, inherited);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Right {\n");
    sb.append("    rightName: ").append(toIndentedString(rightName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    humanReadableName: ").append(toIndentedString(humanReadableName)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    inherited: ").append(toIndentedString(inherited)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

